name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    permissions:
      contents: write # see https://stackoverflow.com/a/76645503
      pull-requests: write
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://npm.pkg.github.com'

      - name: Install Dependencies
        run: npm install

      - name: Create Release Pull Request
        uses: changesets/action@v1.4.7
        id: changesets
        #        with:
        #          publish:
        #            npm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #      - name: Publish
      #        if: steps.changesets.outputs.hasChangesets == 'false'
      #        # You can do something when a publish should happen.
      #        run: yarn publish

      - name: Is this a release?
        run: echo "hasChangesets" ${{ steps.changesets.outputs.hasChangesets }}; echo "changesets" ${{join(steps.changesets.outputs.*, '\n')}} ; echo "publishedPackages" ${{ steps.changesets.outputs.publishedPackages }} ; echo "publishedPackages[0]" ${{ steps.changesets.outputs.publishedPackages[0] }} ; echo "version" ${{ steps.changesets.outputs.publishedPackages[0].version }} ; echo "pullRequestNumber" ${{ steps.changesets.outputs.pullRequestNumber }} ; echo "published" ${{ steps.changesets.outputs.published }}

      - name: Not a release!
        if: steps.changesets.outputs.hasChangesets == 'true' && steps.changesets.outputs.publishedPackages[0] == null
        run: echo steps.changesets.outputs.publishedPackages ; echo steps.changesets.outputs.publishedPackages[0].version ; echo ${{ steps.changesets.outputs.publishedPackages }} ; echo ${{ steps.changesets.outputs.publishedPackages[0] }}

      - name: Is a release!
        if: steps.changesets.outputs.hasChangesets == 'false' && steps.changesets.outputs.publishedPackages[0] != null
        run: echo steps.changesets.outputs.publishedPackages ; echo steps.changesets.outputs.publishedPackages[0].version ; echo ${{ steps.changesets.outputs.publishedPackages }} ; echo ${{ steps.changesets.outputs.publishedPackages[0] }}

      - name: Set up Go
        if: steps.changesets.outputs.hasChangesets == 'false' && steps.changesets.outputs.publishedPackages[0] != null
        uses: actions/setup-go@v4

      - name: Run GoReleaser
        if: steps.changesets.outputs.hasChangesets == 'false' && steps.changesets.outputs.publishedPackages[0] != null
        uses: goreleaser/goreleaser-action@v5
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
